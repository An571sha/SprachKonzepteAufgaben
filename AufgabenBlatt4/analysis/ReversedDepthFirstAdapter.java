/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExp().apply(this);
        outStart(node);
    }

    public void inATermExp(ATermExp node)
    {
        defaultIn(node);
    }

    public void outATermExp(ATermExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExp(ATermExp node)
    {
        inATermExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermExp(node);
    }

    public void inAAddExp(AAddExp node)
    {
        defaultIn(node);
    }

    public void outAAddExp(AAddExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExp(AAddExp node)
    {
        inAAddExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAddExp(node);
    }

    public void inASubtExp(ASubtExp node)
    {
        defaultIn(node);
    }

    public void outASubtExp(ASubtExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtExp(ASubtExp node)
    {
        inASubtExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASubtExp(node);
    }

    public void inAFactorTerm(AFactorTerm node)
    {
        defaultIn(node);
    }

    public void outAFactorTerm(AFactorTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorTerm(AFactorTerm node)
    {
        inAFactorTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorTerm(node);
    }

    public void inATimesTerm(ATimesTerm node)
    {
        defaultIn(node);
    }

    public void outATimesTerm(ATimesTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesTerm(ATimesTerm node)
    {
        inATimesTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATimesTerm(node);
    }

    public void inADivTerm(ADivTerm node)
    {
        defaultIn(node);
    }

    public void outADivTerm(ADivTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivTerm(ADivTerm node)
    {
        inADivTerm(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivTerm(node);
    }

    public void inANumFactor(ANumFactor node)
    {
        defaultIn(node);
    }

    public void outANumFactor(ANumFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFactor(ANumFactor node)
    {
        inANumFactor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumFactor(node);
    }

    public void inANestedFactor(ANestedFactor node)
    {
        defaultIn(node);
    }

    public void outANestedFactor(ANestedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedFactor(ANestedFactor node)
    {
        inANestedFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outANestedFactor(node);
    }
}
